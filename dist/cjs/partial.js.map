{"version":3,"file":"partial.js","sourceRoot":"","sources":["../../src/partial.ts"],"names":[],"mappings":";;;;AAAA,wEAAqC;AAErC,qCAA8D;AAC9D,6CAAkD;AAElD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,iBAAO,EAAE,IAAI,+BAAiB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CACzF,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAgB,OAAO;IAAC,kBAAkB;SAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;QAAlB,6BAAkB;;IACxC,OAAO,SAAS,eAAI,QAAQ,EAAE;AAChC,CAAC;AAFD,0BAEC;AACmB,0BAAO;AAC3B,kBAAe,SAAS,CAAC","sourcesContent":["import partial from 'lodash/partial';\n\nimport { DecoratorConfig, DecoratorFactory } from './factory';\nimport { PartialApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(partial, new PartialApplicator(), { property: true, method: false })\n);\n\n/**\n * Partially applies arguments to a function.\n *\n * @export\n * @param {...any[]} partials\n * @returns {PropertyDecorator}\n * @example\n * class MyClass {\n *   lastName: string = 'Schmo';\n *\n *   @Partial('fn', 'Joe')\n *   fn2: () => string;\n *\n *   fn(name: string): string {\n *     return `${name} ${this.lastName}`;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn2(); //=> 'Joe Schmo'\n */\nexport function Partial(...partials: any[]): PropertyDecorator {\n  return decorator(...partials);\n}\nexport { Partial as partial };\nexport default decorator;\n"]}