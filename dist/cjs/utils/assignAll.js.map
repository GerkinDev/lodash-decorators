{"version":3,"file":"assignAll.js","sourceRoot":"","sources":["../../../src/utils/assignAll.ts"],"names":[],"mappings":";;;;AAAA,wEAAqC;AACrC,wEAAqC;AACrC,0EAAuC;AAEvC;;;;;;;;;;;GAWG;AACH,SAAgB,SAAS,CAAO,EAAK,EAAE,IAAO,EAAE,QAAuB;IAAvB,yBAAA,EAAA,aAAuB;IACrE,IAAM,UAAU,GAAG,iBAAO,2CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAK,QAAQ,SAAC,CAAC;IAE1E,KAAmB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAE;QAA1B,IAAM,IAAI,mBAAA;QACb,IAAA,iBAAO,EAAC,cAAc,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACzC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AARD,8BAQC;AAED;;;;;;;;;GASG;AACH,SAAgB,cAAc,CAAO,EAAK,EAAE,IAAO,EAAE,IAAY;IAC/D,IAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAE7D,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,YAAY,EAAE;QAC1C,IAAM,aAAa,GAAG,MAAM,CAAC,wBAAwB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAElE,IAAI,IAAA,kBAAQ,EAAC,aAAa,CAAC,EAAE;YAC3B,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;SAChD;aAAM;YACJ,EAAU,CAAC,IAAI,CAAC,GAAI,IAAY,CAAC,IAAI,CAAC,CAAC;SACzC;KACF;AACH,CAAC;AAZD,wCAYC","sourcesContent":["import without from 'lodash/without';\nimport attempt from 'lodash/attempt';\nimport isObject from 'lodash/isObject';\n\n/**\n * Assigns all properties from an object to another object including non enumerable\n * properties.\n *\n * @export\n * @template T\n * @template U\n * @param {T} to\n * @param {U} from\n * @param {string[]} [excludes=[]]\n * @returns {T}\n */\nexport function assignAll<T, U>(to: T, from: U, excludes: string[] = []): T {\n  const properties = without(Object.getOwnPropertyNames(from), ...excludes);\n\n  for (const prop of properties) {\n    attempt(assignProperty, to, from, prop);\n  }\n\n  return to;\n}\n\n/**\n * Assigns a property from one object to another while retaining descriptor properties.\n *\n * @export\n * @template T\n * @template U\n * @param {T} to\n * @param {U} from\n * @param {string} prop\n */\nexport function assignProperty<T, U>(to: T, from: U, prop: string): void {\n  const descriptor = Object.getOwnPropertyDescriptor(to, prop);\n\n  if (!descriptor || descriptor.configurable) {\n    const srcDescriptor = Object.getOwnPropertyDescriptor(from, prop);\n\n    if (isObject(srcDescriptor)) {\n      Object.defineProperty(to, prop, srcDescriptor);\n    } else {\n      (to as any)[prop] = (from as any)[prop];\n    }\n  }\n}\n"]}