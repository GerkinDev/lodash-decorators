{"version":3,"file":"rearg.js","sourceRoot":"","sources":["../../src/rearg.ts"],"names":[],"mappings":";;;;AAAA,oEAAiC;AAEjC,qCAKmB;AACnB,6CAAuD;AAEvD,IAAM,SAAS,GAAG,0BAAgB,CAAC,uBAAuB,CACxD,IAAI,yBAAe,CAAC,eAAK,EAAE,IAAI,oCAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC7E,CAAC;AAEF,SAAgB,KAAK,CAAC,OAA+C;IAAE,cAA8B;SAA9B,UAA8B,EAA9B,qBAA8B,EAA9B,IAA8B;QAA9B,6BAA8B;;IACnG,OAAO,SAAS,2CAAC,OAAO,GAAK,IAAI,UAAE;AACrC,CAAC;AAFD,sBAEC;AACiB,sBAAK;AACvB,kBAAe,SAAS,CAAC","sourcesContent":["import rearg from 'lodash/rearg';\n\nimport {\n  DecoratorConfig,\n  DecoratorFactory,\n  LodashDecorator,\n  ResolvableFunction\n} from './factory';\nimport { PartialValueApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(rearg, new PartialValueApplicator(), { property: true })\n);\n\nexport function Rearg(indexes: ResolvableFunction | number | number[], ...args: (number | number[])[]): LodashDecorator {\n  return decorator(indexes, ...args);\n}\nexport { Rearg as rearg };\nexport default decorator;\n"]}