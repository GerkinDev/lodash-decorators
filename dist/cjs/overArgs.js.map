{"version":3,"file":"overArgs.js","sourceRoot":"","sources":["../../src/overArgs.ts"],"names":[],"mappings":";;;;AAAA,0EAAuC;AAEvC,qCAAqF;AACrF,6CAAmD;AAEnD,IAAM,SAAS,GAAG,0BAAgB,CAAC,eAAe,CAChD,IAAI,yBAAe,CAAC,kBAAQ,EAAE,IAAI,gCAAkB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAC1E,CAAC;AAEF;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,QAAQ;IAAC,oBAAyB;SAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;QAAzB,+BAAyB;;IAChD,OAAO,SAAS,eAAI,UAAU,EAAE;AAClC,CAAC;AAFD,4BAEC;AACoB,4BAAQ;AAC7B,kBAAe,SAAS,CAAC","sourcesContent":["import overArgs from 'lodash/overArgs';\n\nimport { DecoratorConfig, DecoratorFactory, LodashMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createDecorator(\n  new DecoratorConfig(overArgs, new PreValueApplicator(), { setter: true })\n);\n\n/**\n * Creates a function that invokes func with its arguments transformed.\n *\n * @export\n * @param {...Function[]} transforms\n * @returns {LodashMethodDecorator}\n * @example\n * class MyClass {\n *   @OverArgs(_.castArray)\n *   fn(list) {\n *     return list;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn([ 1 ]); //=> [ 1 ];\n * myClass.fn(1); //=> [ 1 ];\n */\nexport function OverArgs(...transforms: Function[]): LodashMethodDecorator {\n  return decorator(...transforms);\n}\nexport { OverArgs as overArgs };\nexport default decorator;\n"]}