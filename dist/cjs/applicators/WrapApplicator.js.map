{"version":3,"file":"WrapApplicator.js","sourceRoot":"","sources":["../../../src/applicators/WrapApplicator.ts"],"names":[],"mappings":";;;;AAAA,2CAA4D;AAC5D,kCAA2C;AAE3C;IAAoC,+CAAU;IAA9C;;IAMA,CAAC;IALC,8BAAK,GAAL,UAAM,EAA8D;YAA5D,IAAI,UAAA,EAAY,OAAO,oBAAA,EAAI,MAAM,YAAA,EAAE,KAAK,WAAA;QAC9C,OAAO;YAAS,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,+BAAoB;;YAClC,OAAO,OAAO,CAAC,IAAA,uBAAe,EAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QACxF,CAAC,CAAC;IACJ,CAAC;IACH,qBAAC;AAAD,CAAC,AAND,CAAoC,uBAAU,GAM7C;AANY,wCAAc","sourcesContent":["import { Applicator, ApplicateOptions } from './Applicator';\nimport { resolveFunction } from '../utils';\n\nexport class WrapApplicator extends Applicator {\n  apply({ args, config: { execute }, target, value }: ApplicateOptions): any {\n    return function(...invokeArgs: any[]): any {\n      return execute(resolveFunction(args[0], this, target), value).apply(this, invokeArgs);\n    };\n  }\n}"]}