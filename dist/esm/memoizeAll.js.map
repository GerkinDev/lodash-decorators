{"version":3,"file":"memoizeAll.js","sourceRoot":"","sources":["../../src/memoizeAll.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAA2B,MAAM,WAAW,CAAC;AACvF,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAGlD;;;;GAIG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,gBAAgB,CAAC,eAAe,CACxD,IAAI,eAAe,CAAC,OAAO,EAAE,IAAI,iBAAiB,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACjB,CAAC;AACjE,OAAO,EAAE,UAAU,IAAI,UAAU,EAAE,CAAC;AACpC,eAAe,UAAU,CAAC","sourcesContent":["import memoize from 'lodash/memoize';\n\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator1 } from './factory';\nimport { MemoizeApplicator } from './applicators';\nimport { MemoizeConfig } from './shared';\n\n/**\n * Memoizes a function on the prototype instead of the instance. All instances of the class use the same memoize cache.\n *\n * @param {Function} [resolver] Optional resolver\n */\nexport const MemoizeAll = DecoratorFactory.createDecorator(\n  new DecoratorConfig(memoize, new MemoizeApplicator(), { optionalParams: true })\n) as BiTypedMethodDecorator1<Function | MemoizeConfig<any, any>>;\nexport { MemoizeAll as memoizeAll };\nexport default MemoizeAll;\n"]}