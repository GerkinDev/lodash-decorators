{"version":3,"file":"mixin.js","sourceRoot":"","sources":["../../src/mixin.ts"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,UAAU,KAAK;IAAC,cAAiB;SAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;QAAjB,yBAAiB;;IACrC,OAAO,CAAC,UAAC,MAAgB;QACvB,MAAM,8BAAC,MAAM,CAAC,SAAS,GAAK,IAAI,UAAE;QAElC,OAAO,MAAM,CAAC;IAChB,CAAC,CAAQ,CAAC;AACZ,CAAC;AACD,OAAO,EAAE,KAAK,IAAI,KAAK,EAAE,CAAC;AAC1B,eAAe,KAAK,CAAC","sourcesContent":["import assign from 'lodash/assign';\n\n/**\n * Mixins an object into the classes prototype.\n *\n * @export\n * @param {...Object[]} srcs\n * @returns {ClassDecorator}\n * @example\n *\n * const myMixin = {\n *   blorg: () => 'blorg!'\n * }\n *\n * @Mixin(myMixin)\n * class MyClass {}\n *\n * const myClass = new MyClass();\n *\n * myClass.blorg(); // => 'blorg!'\n */\nexport function Mixin(...srcs: Object[]): ClassDecorator {\n  return ((target: Function) => {\n    assign(target.prototype, ...srcs);\n\n    return target;\n  }) as any;\n}\nexport { Mixin as mixin };\nexport default Mixin;\n"]}