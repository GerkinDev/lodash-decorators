{"version":3,"file":"negate.js","sourceRoot":"","sources":["../../src/negate.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,eAAe,CAAC;AAEnC,OAAO,EACL,eAAe,EACf,gBAAgB,EAGjB,MAAM,WAAW,CAAC;AACnB,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAC;AAEvD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,IAAM,MAAM,GAAG,gBAAgB,CAAC,uBAAuB,CAC5D,IAAI,eAAe,CAAC,MAAM,EAAE,IAAI,sBAAsB,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAC3D,CAAC;AAC3C,OAAO,EAAE,MAAM,IAAI,MAAM,EAAE,CAAC;AAC5B,eAAe,MAAM,CAAC","sourcesContent":["import negate from 'lodash/negate';\n\nimport {\n  DecoratorConfig,\n  DecoratorFactory,\n  ResolvableFunction,\n  BiTypedDecorator1\n} from './factory';\nimport { PartialValueApplicator } from './applicators';\n\n/**\n * Negates a functions result or, when used on a property, creates a function that\n * negates the result of a provided function.\n *\n * @param {ResolvableFunction} [fn] A resolvable function.\n * @example\n * class MyClass {\n *   @Negate('fn')\n *   fn2: () => boolean;\n *\n *   fn(): boolean {\n *     return true;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn2(); //=> false\n */\nexport const Negate = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(negate, new PartialValueApplicator(), { property: true, optionalParams: true })\n) as BiTypedDecorator1<ResolvableFunction>;\nexport { Negate as negate };\nexport default Negate;\n"]}