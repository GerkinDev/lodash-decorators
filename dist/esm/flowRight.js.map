{"version":3,"file":"flowRight.js","sourceRoot":"","sources":["../../src/flowRight.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EACL,eAAe,EACf,gBAAgB,EAGjB,MAAM,WAAW,CAAC;AACnB,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,IAAM,SAAS,GAAG,gBAAgB,CAAC,uBAAuB,CACxD,IAAI,eAAe,CAAC,SAAS,EAAE,IAAI,iBAAiB,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC3F,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,SAAS;IAAC,aAA4B;SAA5B,UAA4B,EAA5B,qBAA4B,EAA5B,IAA4B;QAA5B,wBAA4B;;IACpD,OAAO,SAAS,eAAI,GAAG,EAAE;AAC3B,CAAC;AACD,OAAO,EAAE,SAAS,IAAI,SAAS,EAAE,CAAC;AAClC,eAAe,SAAS,CAAC","sourcesContent":["import flowRight from 'lodash/flowRight';\n\nimport {\n  DecoratorConfig,\n  DecoratorFactory,\n  LodashDecorator,\n  ResolvableFunction\n} from './factory';\nimport { ComposeApplicator } from './applicators';\n\nconst decorator = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(flowRight, new ComposeApplicator({ post: false }), { property: true })\n);\n\n/**\n * Creates a function that returns the result of invoking the given functions with the this binding of the created function,\n * where each successive invocation is supplied the return value of the previous.\n *\n * @example\n *\n * class MyClass {\n *   name = 'Ted';\n *\n *   @FlowRight(toUpperCase, 'getName')\n *   getUpperCaseName: () => string;\n *\n *   getName() {\n *     return this.name;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.getUpperCaseName(); // => 'TED'\n */\nexport function FlowRight(...fns: ResolvableFunction[]): LodashDecorator {\n  return decorator(...fns);\n}\nexport { FlowRight as flowRight };\nexport default decorator;\n"]}