{"version":3,"file":"bind.js","sourceRoot":"","sources":["../../src/bind.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,aAAa,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAA2B,MAAM,WAAW,CAAC;AACvF,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,IAAM,IAAI,GAAG,gBAAgB,CAAC,uBAAuB,CAC1D,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,cAAc,EAAE,EAAE;IAC9C,cAAc,EAAE,IAAI;CACrB,CAAC,CAC6B,CAAC;AAClC,OAAO,EAAE,IAAI,IAAI,IAAI,GAAG,CAAC;AACzB,eAAe,IAAI,CAAC","sourcesContent":["import bind from 'lodash/bind';\n\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator1 } from './factory';\nimport { BindApplicator } from './applicators';\n\n/**\n * Creates a function that invokes func with the this binding of thisArg and partials prepended to the arguments it receives.\n *\n * The _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for partially applied arguments.\n *\n * Note: Unlike native Function#bind, this method doesn't set the \"length\" property of bound functions.\n *\n * @param {...*} [partials] The argument to be partially applied.\n * @example\n *\n * class MyClass {\n *   @Bind()\n *   bound() {\n *     return this;\n *   }\n *\n *   unbound() {\n *     return this;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.bound.call(null); // => myClass {}\n * myClass.unbound.call(null); // => null\n */\nexport const Bind = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(bind, new BindApplicator(), {\n    optionalParams: true\n  })\n) as BiTypedMethodDecorator1<any>;\nexport { Bind as bind, };\nexport default Bind;\n"]}