{"version":3,"file":"once.js","sourceRoot":"","sources":["../../src/once.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,aAAa,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAoB,MAAM,WAAW,CAAC;AAChF,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAEnD;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,IAAM,IAAI,GAAG,gBAAgB,CAAC,uBAAuB,CAC1D,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,kBAAkB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACxE,CAAC;AACtB,OAAO,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC;AACxB,eAAe,IAAI,CAAC","sourcesContent":["import once from 'lodash/once';\n\nimport { DecoratorConfig, DecoratorFactory, BiTypedDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\n/**\n * Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation.\n *\n * @example\n * class MyClass {\n *   value: number = 0;\n *\n *   @Once()\n *   fn(): number {\n *     return ++this.value;\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn(); //=> 1\n * myClass.fn(); //=> 1\n * myClass.fn(); //=> 1\n */\nexport const Once = DecoratorFactory.createInstanceDecorator(\n  new DecoratorConfig(once, new PreValueApplicator(), { setter: true, optionalParams: true })\n) as BiTypedDecorator;\nexport { Once as once };\nexport default Once;\n"]}