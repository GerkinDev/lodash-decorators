{"version":3,"file":"MemoizeApplicator.js","sourceRoot":"","sources":["../../../src/applicators/MemoizeApplicator.ts"],"names":[],"mappings":";AAAA,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAC3C,OAAO,YAAY,MAAM,qBAAqB,CAAC;AAE/C,OAAO,EAAE,UAAU,EAAoB,MAAM,cAAc,CAAC;AAC5D,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C;IAAuC,qCAAU;IAAjD;;IA2BA,CAAC;IA1BC,iCAAK,GAAL,UAAM,EAA+E;YAA7E,KAAK,WAAA,EAAE,QAAQ,cAAA,EAAY,OAAO,oBAAA,EAAW,GAAG,aAAA,EAAG,MAAM,YAAA;QAC/D,IAAI,QAAQ,GAAG,eAAe,CAC5B,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAC9D,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;QAEF,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACxB,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACpC;QAED,IAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEtE,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE;YACb,IAAA,KAAK,GAAW,GAAG,MAAd,EAAE,IAAI,GAAK,GAAG,KAAR,CAAS;YAE5B,IAAI,KAAK,EAAE;gBACT,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;aACxB;iBAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;gBAC3B,QAAQ,CAAC,KAAK,GAAG,IAAK,IAAY,EAAE,CAAC;aACtC;SACF;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IACH,wBAAC;AAAD,CAAC,AA3BD,CAAuC,UAAU,GA2BhD","sourcesContent":["import isFunction from 'lodash/isFunction';\nimport isObjectLike from 'lodash/isObjectLike';\n\nimport { Applicator, ApplicateOptions } from './Applicator';\nimport { resolveFunction } from '../utils';\n\nexport class MemoizeApplicator extends Applicator {\n  apply({ value, instance, config: { execute }, args: [arg], target }: ApplicateOptions): any {\n    let resolver = resolveFunction(\n      isFunction(arg) ? arg : isObjectLike(arg) ? arg.resolver : arg,\n      instance,\n      target,\n      false\n    );\n\n    if (resolver && instance) {\n      resolver = resolver.bind(instance);\n    }\n\n    const memoized = resolver ? execute(value, resolver) : execute(value);\n\n    if (isObjectLike(arg)) {\n      const { cache, type } = arg;\n\n      if (cache) {\n        memoized.cache = cache;\n      } else if (isFunction(type)) {\n        memoized.cache = new (type as any)();\n      }\n    }\n\n    return memoized;\n  }\n}\n"]}