{"version":3,"file":"attempt.js","sourceRoot":"","sources":["../../src/attempt.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,gBAAgB,CAAC;AACrC,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAErC,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAA0B,MAAM,WAAW,CAAC;AACtF,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAEnD,IAAM,SAAS,GAAG,UAAC,EAAc,IAAK,OAAA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAApB,CAAoB,CAAC;AAE3D;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,CAAC,IAAM,OAAO,GAAG,gBAAgB,CAAC,eAAe,CACrD,IAAI,eAAe,CAAC,SAAS,EAAE,IAAI,kBAAkB,EAAE,EAAE;IACvD,cAAc,EAAE,IAAI;CACrB,CAAC,CACuB,CAAC;AAC5B,OAAO,EAAE,OAAO,IAAI,OAAO,EAAE,CAAC;AAC9B,eAAe,OAAO,CAAC","sourcesContent":["import attempt from 'lodash/attempt';\nimport partial from 'lodash/partial';\n\nimport { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\nconst attemptFn = (fn: () => void) => partial(attempt, fn);\n\n/**\n * Attempts to invoke func, returning either the result or the caught error object. Any additional arguments are provided to func when it's invoked.\n *\n * @param {...*} [args] The arguments to invoke func with.\n * @example\n *\n * class MyClass {\n *   @Attempt()\n *   fn(value) {\n *     if (typeof value === 'number') {\n *       return value\n *     }\n *\n *     throw new Error();\n *   }\n * }\n *\n * const myClass = new MyClass();\n *\n * myClass.fn(10); // => 10;\n * myClass.fn(null); // => Error\n */\nexport const Attempt = DecoratorFactory.createDecorator(\n  new DecoratorConfig(attemptFn, new PreValueApplicator(), {\n    optionalParams: true\n  })\n) as BiTypedMethodDecorator;\nexport { Attempt as attempt };\nexport default Attempt;\n"]}