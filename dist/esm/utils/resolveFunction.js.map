{"version":3,"file":"resolveFunction.js","sourceRoot":"","sources":["../../../src/utils/resolveFunction.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAC3C,OAAO,QAAQ,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAC;AAE5B;;;;;;;;;;GAUG;AACH,MAAM,UAAU,eAAe,CAAC,MAAwB,EAAE,OAAa,EAAE,MAAY,EAAE,aAAoB;IAApB,8BAAA,EAAA,oBAAoB;IACzG,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;QACtB,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC3B,IAAI,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;YAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC;SACxB;aAAM,IAAI,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;YAC/C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC;SACvB;KACF;IAED,IAAI,aAAa,EAAE;QACjB,MAAM,IAAI,cAAc,CAAC,GAAG,CAAC,4BAA0B,MAAM,2BAAwB,CAAC,CAAC,CAAC;KACzF;AACH,CAAC","sourcesContent":["import isFunction from 'lodash/isFunction';\nimport isString from 'lodash/isString';\nimport { log } from './log';\n\n/**\n * Resolves a function on the current target object. It first will\n * try and resolve on the context object, then the target object,\n * then an error will be thrown if the method can not be resolved.\n *\n * @private\n * @param {Function|string} method The method or method name.\n * @param {Object} [context] The context object to resolve from.\n * @param {Object} [target] The target object to resolve from.\n * @returns {Function} The resolved function.\n */\nexport function resolveFunction(method?: string|Function, context?: any, target?: any, throwNotFound = true): any {\n  if (isFunction(method)) {\n    return method;\n  } else if (isString(method)) {\n    if (context && isFunction(context[method])) {\n      return context[method];\n    } else if (target && isFunction(target[method])) {\n      return target[method];\n    }\n  }\n\n  if (throwNotFound) {\n    throw new ReferenceError(log(`Can not resolve method ${method} on any target Objects`));\n  }\n}\n"]}