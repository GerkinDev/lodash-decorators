{"version":3,"file":"onceAll.js","sourceRoot":"","sources":["../../src/onceAll.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,aAAa,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAoB,MAAM,WAAW,CAAC;AAChF,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAEnD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,IAAM,OAAO,GAAG,gBAAgB,CAAC,eAAe,CACrD,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,kBAAkB,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACxE,CAAC;AACtB,OAAO,EAAE,OAAO,IAAI,OAAO,EAAE,CAAC;AAC9B,eAAe,OAAO,CAAC","sourcesContent":["import once from 'lodash/once';\n\nimport { DecoratorConfig, DecoratorFactory, BiTypedDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\n\n/**\n * Creates a function that is restricted to invoking func once. Repeat calls to the function return the value of the first invocation.\n * This is shared across all instances of the class.\n *\n * @example\n * const value = 0;\n *\n * class MyClass {\n *   @Once()\n *   fn(): number {\n *     return ++value;\n *   }\n * }\n *\n * const myClass = new MyClass();\n * const myClass2 = new MyClass();\n *\n * myClass.fn(); //=> 1\n * myClass2.fn(); //=> 1\n */\nexport const OnceAll = DecoratorFactory.createDecorator(\n  new DecoratorConfig(once, new PreValueApplicator(), { setter: true, optionalParams: true })\n) as BiTypedDecorator;\nexport { OnceAll as onceAll };\nexport default OnceAll;\n"]}