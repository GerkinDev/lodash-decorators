{"version":3,"file":"tap.js","sourceRoot":"","sources":["../../src/tap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAA0B,MAAM,WAAW,CAAC;AACtF,OAAO,EAAE,kBAAkB,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAExC;;;GAGG;AACH,MAAM,CAAC,IAAM,GAAG,GAAG,gBAAgB,CAAC,eAAe,CACjD,IAAI,eAAe,CAAC,UAAC,EAAY,IAAK,OAAA,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC,EAApB,CAAoB,EAAE,IAAI,kBAAkB,EAAE,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CACtF,CAAC;AAC5B,OAAO,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC;AACtB,eAAe,GAAG,CAAC","sourcesContent":["import { DecoratorConfig, DecoratorFactory, BiTypedMethodDecorator } from './factory';\nimport { PreValueApplicator } from './applicators';\nimport { returnAtIndex } from './utils';\n\n/**\n * Returns the first argument from the function regardless of\n * the decorated functions return value.\n */\nexport const Tap = DecoratorFactory.createDecorator(\n  new DecoratorConfig((fn: Function) => returnAtIndex(fn, 0), new PreValueApplicator(), { optionalParams: true })\n) as BiTypedMethodDecorator;\nexport { Tap as tap };\nexport default Tap;\n"]}